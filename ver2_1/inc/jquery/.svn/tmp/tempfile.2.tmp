var pxMulti = 2;
var AddJobListDB = new Array();
var BeginDateOffset;
var EndDateOffset;
var BeginDate;
var EndDate;

function parseDate(str) {
	try {
		var mdy = str.split("-");
		return new Date(mdy[2], mdy[1] - 1, mdy[0]);
	}
	catch (err) {
		return str;
	}
}
function daydiff(first, second) {

	return (second.getTime() - first.getTime()) / (1000 * 60 * 60 * 24)
}
function CheckIntVal(Int) {
	if (Int == undefined) { Int = 0; }
	return Int;
}

function IsValidDate(input) {
	var dayfield = input.split("/")[0];
	var monthfield = input.split("/")[1];
	var yearfield = input.split("/")[2];
	var returnval;
	var dayobj = new Date(yearfield, monthfield - 1, dayfield)
	if ((dayobj.getMonth() + 1 != monthfield) || (dayobj.getDate() != dayfield) || (dayobj.getFullYear() != yearfield)) {
		alert("Forkert datoformat, skriv venligst dd/mm/yyyy eller d/m/yyyy");
		returnval = false;
	}
	else {
		returnval = true;
	}
	return returnval;
}

function positionMarker(obj, DataElement) {
	var hasDateLength; var start; var length;
	(DataElement.startdate != null && DataElement.enddate != null && DataElement.enddate != undefined && DataElement.enddate != "") ? hasDateLength = true : hasDateLength = false;
	
	if (DataElement.alternatestartdate != null) {
		var AltBeginDate = parseDate(DataElement.alternatestartdate);
		start = (daydiff(AltBeginDate, parseDate(DataElement.startdate)) * pxMulti)
	}
	else {
		start = (daydiff(BeginDate, parseDate(DataElement.startdate)) * pxMulti) + BeginDateOffset.left;
	 }

	 if (DataElement.absmarkcorr) {
	 	if ($.browser.msie) { start -= 11 };
	 }
	//define length and start position
	if(hasDateLength){ length = daydiff(parseDate(DataElement.startdate), parseDate(DataElement.enddate)) * pxMulti;}
	
	obj.show();
	if (obj.hasClass("ui-icon-seek-next") || obj.hasClass("ui-icon-seek-prev")) obj.removeClass("ui-icon-orange").removeClass("ui-icon-seek-next").removeClass("ui-icon-seek-prev");
	
	//perform correctional actions if there is a datelength defined.
	
	if (hasDateLength) {
		//if nothing of the percentbar should be visible inside the frame hide it and the containing job
		if (start + length < BeginDateOffset.left) {
			(obj.parent(".job").length > 0) ? obj.hide().parent(".job").remove() : start = BeginDateOffset.left, length = 16, obj.css("overflow", "hidden").progressbar("destroy").addClass("ui-icon-orange").addClass("ui-icon-seek-next");
		}
		else {
			//else if only part of it should be visible, adapt.
			if (start < BeginDateOffset.left) {
				length = length - (BeginDateOffset.left - start);
				start = BeginDateOffset.left;
			}
		}

		//if nothing of the percentbar should be visible inside the frame hide it and the containing job
		if (start > EndDateOffset.left) {
			(obj.parent(".job").length > 0) ? obj.hide().parent(".job").remove() : start = EndDateOffset.left, length = 10, obj.css("overflow", "hidden").progressbar("destroy").addClass("ui-icon-orange").addClass("ui-icon-seek-prev");
		}
		else {
			//else if only part of it should be visible, adapt.
			if (start + length > EndDateOffset.left) {
				length = EndDateOffset.left - start;
			}
		}
		
		obj.width(length);
	}
	
	obj.css("left", start);
}

$.fn.makeMilePael = function(DataElement){
	var milePael = $(this);
	DataElement.absmarkcorr = true;
	DataElement.datatype = "milepole";
	milePael.attr("title", "(" + DataElement.startdate + ") " + DataElement.name + " - " + DataElement.type);
positionMarker(milePael, DataElement);
}

$.fn.makePercentBar = function(DataElement) {
	var percentbar = $(this);
	
	//make sure that calculations can be made, and that they haven't been made before
	var percentval = Math.round((100 / DataElement.precalc) * DataElement.realised);

	//if precalc is equal to 0, meaning that there is no estimate, make the percentage 100
	isFinite(percentval) ? percentval = percentval : (DataElement.realised > DataElement.precalc) ? percentval = 100 : percentval = 0;

	percentbar.attr("title", DataElement.startdate + " - " + DataElement.enddate).progressbar({ value: percentval })
		.children(".ui-progressbar-value").text(percentval + "%").css("text-align", "center");
	if (percentval > 100) {
		percentbar.css({ borderColor: "#FF8F8F" });
		percentbar.children(".ui-progressbar-value").css({ borderColor: "#CF0000", background: "#FF1F1F url(../inc/jquery/images/ui-bg_gloss-wave_45_e14f1c_500x100.png) repeat-x scroll 50% 50%" });
	}
	if (percentval == 100) {
		percentbar.css({ borderColor: "#B2FF5F" });
		percentbar.children(".ui-progressbar-value").css({ borderColor: "#4B8F00", background: "#FF1F1F url(../inc/jquery/images/ui-bg_gloss-wave_50_6eac2c_500x100.png) repeat-x scroll 50% 50%" });
	}
	if (DataElement.jobresp1 != null) {
		//define jobresponsible variables
		var jobresp1split = DataElement.jobresp1.split('-');
		var jobresp1 = jobresp1split[1];
		var jobresp1mail = jobresp1split[2];
		var jobresp2split = DataElement.jobresp2.split('-');
		var jobresp2 = jobresp2split[1];
		var jobresp2mail = jobresp2split[2];

		percentbar.siblings(".percentInfo").html("forkalk: " + DataElement.precalc + " real: " + DataElement.realised + " res: " + DataElement.resource + " pri: " + DataElement.prioritet + "<br />jobans:<a class='rmenu' href='mailto:" + jobresp1mail + "'>" + jobresp1 + "</a>, <a class='rmenu' href='mailto:" + jobresp2mail + "'>" + jobresp2 + "</a>");
	}
	else {
		percentbar.siblings(".percentInfo").html("forkalk: " + DataElement.precalc + " real: " + DataElement.realised + "");
	}

	positionMarker(percentbar, DataElement, true);
	
	//add style to jobtable
	$(".job:odd").css({ "background-color": "#EFF3FF", "border-top": "1px solid #ccc", "border-bottom": "1px solid #ccc" });
	$(".job:even").css({ "background-color": "#FFF", "border": "0" });
	$("#todayMarker").height($("#JobGraph").height());
}


function AddJobs() {
	var AddJobList = AddJobListDB;
	var ij = AddJobList.length; while (ij--) {
			var ArrActivities = AddJobList[ij].ArrActivities;
			var ArrMilePael = AddJobList[ij].ArrMilePael;
			var customer = AddJobList[ij].customer;
			var name = AddJobList[ij].name;
			var jid = AddJobList[ij].jid;
			var precalc = AddJobList[ij].precalc;
			var realised = AddJobList[ij].realised;
			var resource = AddJobList[ij].resource;
			var startdate = AddJobList[ij].startdate;
			var enddate = AddJobList[ij].enddate;
			var jnr = AddJobList[ij].jnr;
			var cnr = AddJobList[ij].cnr;
			var prioritet = AddJobList[ij].prioritet;

			//define jobresponsible variables
			var jobresp1split = AddJobList[ij].jobresp1.split('-');
			var jobresp1 = jobresp1split[1];
			var jobresp1mail = jobresp1split[2];
			var jobresp2split = AddJobList[ij].jobresp2.split('-');
			var jobresp2 = jobresp2split[1];
			var jobresp2mail = jobresp2split[2];
			
			//create milepael elements on job
			var MilePaelStr = "";
			for (var i = 0, il = ArrMilePael.length; i < il; i++){
				MilePaelStr += "<div class\=\'ui-icon-orange ui-icon-flag milepael\' style='position\:absolute\' ><\/div>";
			}

			$("#JobGraph").append("<div class='job'><span class='jobInfo' style='font-weight:bold'>" + (customer + " (" + cnr + ")") + "<br /><a href='jobs.asp?menu=job&func=red&id=" + jid + "&int=1&rdir=webblik_joblisten2' class='vmenu' title='" + name + " (" + jnr + ")" + "' target='_blank'>" + (name + " (" + jnr + ")").substring(0, 31) + "</a></span>" + MilePaelStr + "<div class='percentBar' title='" + startdate + " - " + enddate + "'></div><span class='percentInfo'></span><br class='clear' /><div class='activities'><img class='loadingActivityIcon' src='../inc/jquery/images/ajax-loader.gif' alt='henter data'/></div><center class='clear'><div class='closeOpenIcon ui-icon ui-icon-carat-1-s' /></center></div>");
			var newJob = $("#JobGraph div.job:last");
			//fade if priority is hidden
			if (prioritet == -1) { newJob.fadeTo(1, 0.8); }
			newJob.data("dataElm", AddJobList[ij]);
			var ActivityDiv = newJob.children("div.activities");
			newJob.children("div.percentBar").makePercentBar(AddJobList[ij]);

			if (newJob.length > 0) {
				//check whether a dateline should be inserted
				if ((ij / 7).toString().indexOf('.') == -1 && ij + 5 < AddJobList.length) {
					try {
						$("#JobGraphHeader").clone().css("margin", "5px 0px 5px 0px").insertAfter(newJob);
					}
					catch (err) { }
				} 
			}
			
			newJob.children("div.milepael").each(function(index) {
				$(this).data("dataElm", ArrMilePael[index]).makeMilePael(ArrMilePael[index]);
			});
		}

	$("#JobGraph .loadingIcon").remove();	
	
	//perform final wrap up
	//hide activities
	$("#JobGraph .activities").hide();

	//create dialog box for dragging
	$("#JobGraph").append("<div id='jobDialog' title='ændring af dato'><p>Datoen på <span class='jobName'>0</span> vil blive ændret <span class='jobNotice'>0</span></p><br /><span id='ajaxFromDate'>Fra:<br /><input type='text' id='ajaxStartDate' /></span><br /><span id='ajaxToDate'>Til:<br /><input type='text' id='ajaxEndDate' /></span></div>");
	//create toggle methods for activity divs
	$("#JobGraph .closeOpenIcon").toggle(function() {
		var job = $(this).parent().parent(".job");
		job.children(".activities").stop().slideDown(200, function() { $("#todayMarker").height($("#JobGraph").height()); });
		if (!(job.hasClass("hasActivities"))) {
			var DataElm = job.data("dataElm");
			var ArrActivities = DataElm.ArrActivities;
			//create subbars with activities
			//Activity elements must look like ArrActivities[i] = { "name" : (), "precalc" : (), "realised" : (), "startdate" : (), "enddate" : (), "id" : () })
			var ActivitiesStr = "";
			for (var i = 0, il = ArrActivities.length; i < il; i++) {
			ActivitiesStr += "<br class='clear' /><div class='activity'><span class='jobInfo' title='" + (ArrActivities[i].name + " (#" + ArrActivities[i].id + ")") + "'>" + (ArrActivities[i].name + " (" + ArrActivities[i].id + ")").substring(0, 31) + "</span><div class='percentBar' title='" + ArrActivities[i].startdate + " - " + ArrActivities[i].enddate + "'></div><span class='percentInfo'></span></div>";
			}
			
			ActivitiesStr += '<br class="clear" /><div style="border: 1px solid rgb(140, 170, 230); padding: 3px; margin:3px; float:left; width: 130px; background-color: rgb(255, 255, 255);"><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody><tr><td><a alt="Opret ny aktivitet" class="vmenu" href="aktiv.asp?menu=job&amp;func=opret&amp;jobid=' + DataElm.jid + '&amp;id=0&amp;jobnavn=' + DataElm.name + '&amp;fb=1&amp;rdir=webbl21&nomenu=1" target="_blank">Opret ny aktivitet</a></td><td style="padding: 3px 0px 0px;"><a alt="Opret ny aktivitet" class="vmenu" href="aktiv.asp?menu=job&amp;func=opret&amp;jobid=' + DataElm.jid + '&amp;id=0&amp;jobnavn=' + DataElm.name + '&amp;fb=1&amp;rdir=webbl21&nomenu=1" target="_blank"><img border="0" src="../ill/add2.png"/></a></td></tr></tbody></table></div>'
			ActivitiesStr += '<div style="border: 1px solid rgb(140, 170, 230); padding: 3px; margin:3px; float:left; width: 140px; background-color: rgb(255, 255, 255);"><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody><tr><td><a target="_blank" alt="Opret ny Milepæl" class="vmenu" href="milepale.asp?menu=job&amp;func=opr&amp;jid=' + DataElm.jid + '&amp;rdir=webblik">Opret ny Milepæl</a></td><td style="padding: 3px 0px 0px;"><a target="_blank" alt="Opret ny Milepæl" class="vmenu" href="milepale.asp?menu=job&amp;func=opr&amp;jid=' + DataElm.jid + '&amp;rdir=webblik"><img border="0" src="../ill/add2.png"/></a></td></tr></tbody></table></div>';
			
			
			job.children(".activities").html(ActivitiesStr)
		  .children(".activity").each(function(index) {
			$(this).data("dataElm", ArrActivities[index]);
			//get activity percentbar and pass on for processing on position
			$(this).children("div.percentBar").makePercentBar(ArrActivities[index]);
		});
			Draggable();
			job.addClass("hasActivities");
		}
		$(this).removeClass("ui-icon-carat-1-s").addClass("ui-icon-carat-1-n");
	},
	function() {
		var job = $(this).parent().parent(".job");
		job.children(".activities").stop().slideUp(200, function() { $("#todayMarker").height($("#JobGraph").height()); });
		$(this).removeClass("ui-icon-carat-1-n").addClass("ui-icon-carat-1-s");
	});

	function Draggable() {
		//create drag methods
		var ObjOffset;
		var SelPercentBar;
		var SelPercentActivities;
		var SelMilePael;
		var SelPercentParent;
		$(".percentBar, .milepael").draggable({ axis: 'x',
			start: function() {
				SelPercentBar = $(this).filter(".percentBar");
				SelMilePael = $(this).filter(".milepael");
				SelPercentActivities = SelPercentBar.parent(".job").children(".activities").children(".activity");
				SelPercentParent = SelPercentBar.parent(".activity").parent(".activities").parent(".job");
				ObjOffset = $(this).offset();
				//scroll down activities if they are not currently displayed
				if ($(this).parent(".job").children(".activities").css("display") == "none") { $(this).parent(".job").click(); }

			}, stop: function() {
				var ObjBeginDate = new Date(BeginDate);
				var ObjNewOffset = $(this).offset();
				var DataElm;
				($(this).data("dataElm") != null) ? DataElm = $(this).data("dataElm") : DataElm = $(this).parent().data("dataElm");
				var hasDateLength;
				(DataElm.startdate != null && DataElm.enddate != null) ? hasDateLength = true : hasDateLength = false;

				if (hasDateLength) { var datediff = Math.round(daydiff(parseDate(DataElm.startdate), parseDate(DataElm.enddate))); }
				ObjBeginDate.setDate(ObjBeginDate.getDate() + ((ObjNewOffset.left - BeginDateOffset.left - 20) / pxMulti));
				//$("#jobDialog").dialog('open');

				$("#jobDialog .jobName").html(DataElm.name);
				DataElm.jid != undefined ? jobNotice = " eventuelle underaktiviteter vil blive rykket med" : jobNotice = "";

				//format dateinput boxes default, and make sure that enddate follows startdate

				$("#jobDialog #ajaxEndDate").val($.datepicker.formatDate('d/m/yy', ObjBeginDate)).change(function() {
					try {
						var ajaxEndDate = $.datepicker.parseDate('dd/mm/yy', $("#ajaxEndDate").val());
						$(".ui-dialog-buttonpane button:first").disabled = false;
					}
					catch (err) {
						alert("forkert datoformat skriv venligst d/m/åå eller dd/mm/yy");
						$(".ui-dialog-buttonpane button:first").disabled = true;
					}
				});
				$("#jobDialog #ajaxEndDate").change()
				// if there is an end date, activate the enddate change to take affect, else hide the enddate
				hasDateLength ? $("#jobDialog #ajaxToDate").show() : $("#jobDialog #ajaxToDate").hide();

				$("#jobDialog #ajaxStartDate").val($.datepicker.formatDate('d/m/yy', ObjBeginDate)).change(function() {
					try {
						var ajaxEndDate = $.datepicker.parseDate('dd/mm/yy', $("#ajaxStartDate").val());
						ajaxEndDate.setDate(ajaxEndDate.getDate() + datediff);
						$("#jobDialog #ajaxEndDate").val($.datepicker.formatDate('d/m/yy', ajaxEndDate));
						$(".ui-dialog-buttonpane button:first").disabled = false;
					}
					catch (err) {
						alert("forkert datoformat skriv venligst d/m/åå eller dd/mm/yy");
						$(".ui-dialog-buttonpane button:first").disabled = true;
					}
				});
				$("#jobDialog #ajaxStartDate").change();


				$("#jobDialog .jobNotice").html(jobNotice);

				$("#jobDialog").dialog('option', 'buttons', { 'Accept': function() {

					var asdsDate = $.datepicker.parseDate('dd/mm/yy', $("#jobDialog #ajaxStartDate").val());
					if (hasDateLength) { var aedsDate = $.datepicker.parseDate('dd/mm/yy', $("#jobDialog #ajaxEndDate").val()); }

					var ajaxDatediff = Math.round(daydiff(parseDate(DataElm.startdate), asdsDate));
					$.post("?", "jid=" + DataElm.jid + "&cnr=" + DataElm.cnr + "&dateDiff=" + ajaxDatediff + "&id=" + DataElm.id + "&startdate = " + $.datepicker.formatDate('yy/mm/d', asdsDate) + "&enddate = " + $.datepicker.formatDate('yy/mm/d', aedsDate) + "&func=ajaxupdate&datatype=" + DataElm.datatype + "&ajid=" + DataElm.ajid);

					$(this).dialog('close');
					//reposition and rewrite activities
					if (hasDateLength) {
						SelPercentActivities.each(function() {
							var activityDataElement = $(this).data("dataElm");

							//write new start and enddates to dataelement
							activityDataElement.startdate = $.datepicker.parseDate('dd-mm-yy', activityDataElement.startdate); (activityDataElement.startdate).setDate(((activityDataElement.startdate).getDate() + ajaxDatediff)); activityDataElement.startdate = $.datepicker.formatDate('dd-mm-yy', activityDataElement.startdate);
							activityDataElement.enddate = $.datepicker.parseDate('dd-mm-yy', activityDataElement.enddate); (activityDataElement.enddate).setDate((activityDataElement.enddate).getDate() + ajaxDatediff); activityDataElement.enddate = $.datepicker.formatDate('dd-mm-yy', activityDataElement.enddate);

							$(this).children(".percentBar").makePercentBar(activityDataElement);

							//return activityDataElement rewritten
							$(this).data("dataElm", activityDataElement);
						});

						//reposition and rewrite milepael
						SelPercentBar.parent().children(".milepael").each(function() {
							var milePaelDataElement = $(this).data("dataElm");
							//write new data to milepael
							milePaelDataElement.startdate = $.datepicker.parseDate('dd-mm-yy', milePaelDataElement.startdate); (milePaelDataElement.startdate).setDate(((milePaelDataElement.startdate).getDate() + ajaxDatediff)); milePaelDataElement.startdate = $.datepicker.formatDate('dd-mm-yy', milePaelDataElement.startdate);
							$(this).data("dataElm", milePaelDataElement).makeMilePael(milePaelDataElement);
						});

						//Rewrite DataElement and return to job/activity
						DataElm.startdate = $.datepicker.formatDate('dd-mm-yy', asdsDate);
						if (SelPercentBar.length > 0) {
							DataElm.enddate = $("#ajaxEndDate").val().replace('/', '-').replace('/', '-');
							SelPercentBar.parent(".job").data("dataElm", DataElm);
							SelPercentBar.makePercentBar(DataElm);

							var parentDataElm = SelPercentParent.data("dataElm");
							if (($.datepicker.parseDate('dd-mm-yy', DataElm.startdate)).getTime() < ($.datepicker.parseDate('dd-mm-yy', parentDataElm.startdate)).getTime()) {parentDataElm.startdate = DataElm.startdate; }
							if (($.datepicker.parseDate('dd-mm-yy', DataElm.enddate)).getTime() > ($.datepicker.parseDate('dd-mm-yy', parentDataElm.enddate)).getTime()) { parentDataElm.enddate = DataElm.enddate; }
							SelPercentParent.data("dataElm", parentDataElm);
							SelPercentParent.children(".percentBar").makePercentBar(parentDataElm);
						}
						if (SelMilePael.length > 0) {
							SelMilePael.data("dataElm", DataElm).makeMilePael(DataElm);
						}
					}
				},
					Cancel: function() {
						$(this).dialog('close');
						if (SelPercentBar.length > 0) {
							SelPercentBar.makePercentBar(DataElm);
						}
						if (SelMilePael.length > 0) {
							SelMilePael.makeMilePael(DataElm);
						}
					}
				});

				$("#jobDialog").dialog('open');

			}
		});
	}
	Draggable();
		//make dialogbox accesible
		$("#jobDialog").dialog({
			bgiframe: true,
			resizable: true,
			autoOpen: false,
			height: 400,
			modal: true,
			overlay: {
				backgroundColor: '#000',
				opacity: 0.5
			},
			buttons: { 'Accept': function() { $(this).dialog('close'); },
				Cancel: function() {
					$(this).dialog('close');
					$(this).css({ left: ObjOffset.left, top: ObjOffset.top });
				}
			}
		});
	
		$.datepicker.setDefaults($.extend({ showAnim: 'slide', showOptions: { direction: 'drop' }, duration: -50, showOn: 'button', constrainInput: true, showOtherMonths: true, showWeeks: true, minDate: new Date(2002, 1, 1), firstDay: 1, changeFirstDay: false, buttonImage: '../ill/popupcal.gif', start: 6, buttonImageOnly: true, dateFormat: 'd/m/yy', changeMonth: true, changeYear: true }));
		$("#ajaxStartDate").datepicker();
		$("#ajaxEndDate").datepicker();

		$("#JobGraph .ui-icon").hover(function() {
			$(this).removeClass("ui-icon").addClass("ui-icon-orange");
		}, function() {
			$(this).removeClass("ui-icon-orange").addClass("ui-icon");
		});
	}






function PopulateGraphFrame() {
	//create monthnavigation
	var FM_startdate = $("#FM_startdate");
	var naviDate = $.datepicker.parseDate('d/m/yy', FM_startdate.val());
	$("#navPrevMonth").click(function() {
		naviDate.setMonth(naviDate.getMonth() - 3);
		FM_startdate.val($.datepicker.formatDate('d/m/yy', naviDate));
		var datestring = FM_startdate.val(); var datesplit = datestring.split('/'); $("#FM_start_dag").val(datesplit[0]); $("#FM_start_mrd").val(datesplit[1]); $("#FM_start_aar").val(datesplit[2]);
		$("form").submit()
	});
	$("#navNextMonth").click(function() {
		naviDate.setMonth(naviDate.getMonth() + 3);
		$("#FM_startdate").val($.datepicker.formatDate('d/m/yy', naviDate));
		var datestring = FM_startdate.val(); var datesplit = datestring.split('/'); $("#FM_start_dag").val(datesplit[0]); $("#FM_start_mrd").val(datesplit[1]); $("#FM_start_aar").val(datesplit[2]);
		$("form").submit();
	});
	//Create list items with correct width and name them
	var CalBeginDate = $.datepicker.parseDate('d/m/yy', FM_startdate.val()); CalBeginDate.setMonth(CalBeginDate.getMonth() - 6); CalBeginDate.setDate(1);

	//Create multidimensional array and ordinary array with month names
	MonthArr = new Array("", "");

	var m_names = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

	for(var i = 0; i < 13; i++) {
		CalBeginDate.setMonth(CalBeginDate.getMonth() + i);
		MonthArr[i] = { "days": daysInMonth(CalBeginDate.getMonth() + 1, CalBeginDate.getFullYear()), "name": m_names[CalBeginDate.getMonth()] + " " + CalBeginDate.getFullYear(), "date": CalBeginDate };
		CalBeginDate.setMonth(CalBeginDate.getMonth() - i);

		$("#JobGraphHeader").append("<li class='month'>&nbsp;</li>");
		var newLI = $("#JobGraphHeader li.month:last");
		//-5 because this is border (1px) + 2*margin(2px)
		newLI.width(((MonthArr[i].days) * pxMulti) - 1)
		.text(MonthArr[i].name)
		.data("date", MonthArr[i].date);
		if (i == 0) { BeginDate = new Date(MonthArr[i].date); BeginDateOffset = newLI.offset(); BeginDateOffset.left = BeginDateOffset.left - 20; }
		if (i == 12) { EndDate = new Date(MonthArr[i].date); EndDate.setMonth(EndDate.getMonth() + 12); EndDateOffset = newLI.offset();EndDateOffset.left += newLI.width(); EndDateOffset.left -= 20; }
	}

	function daysInMonth(month, year) {
		var dd = new Date(year, month, 0);
		return dd.getDate();
	}
	var today = new Date();

	//check if todays date is in the dateinterval
	if (BeginDate.getTime() < today.getTime() && today.getTime() < EndDate.getTime()) {
		$("#JobGraph").prepend("<div title='d.d.' id='todayMarker' style='width:1px;'></div>");

		//position todaymarker
		positionMarker($("#todayMarker"), {"startdate" : today, "absmarkcorr" : true});
		$("#JobGraphHeader").append("<li class='infoField' style='border-right:0;'>&nbsp; Timer</li>");
	}
}








$(window).load(function() {

	PopulateGraphFrame();
	AddJobs();
	$("#todayMarker").height($("#JobGraph").height());

	$("#tilLabel").hide();
	$("#FM_enddate").css("display", "none");

});

